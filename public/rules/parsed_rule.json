{
  "rules": [
    {
      "name": "bcf_filter_sample",
      "input": {
        "samples": "samples.txt"
      },
      "output": {
        "default": "{prefix}.filter_sample.vcf"
      },
      "log": {
        "default": "log/{prefix}.filter_sample.vcf.log"
      },
      "params": {
        "filter": "lambda w, input: f\"\"\"--exclude 'GT[@{input.samples}]=\"0/1\"'\"\"\"",
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/filter"
      },
      "input_types": [
        "VCF/BCF file"
      ],
      "output_types": [
        "Filtered VCF/BCF file"
      ],
      "rule": "rule bcf_filter_sample:\n    input:\n        \"{prefix}.bcf\",  # input bcf/vcf needs to be first input\n        samples=\"samples.txt\",  # other inputs, e.g. sample files, are optional\n    output:\n        \"{prefix}.filter_sample.vcf\",\n    log:\n        \"log/{prefix}.filter_sample.vcf.log\",\n    params:\n        filter=lambda w, input: f\"--exclude 'GT[@{input.samples}]=\\\"0/1\\\"'\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/filter\"\n\n\nrule bcf_filter_o_vcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.filter.vcf\",\n    log:\n        \"log/{prefix}.filter.vcf.log\",\n    params:\n        filter=\"-i 'QUAL > 5'\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/filter\"\n\n\nrule bcf_filter_o_vcf_gz:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.filter.vcf.gz\",\n    log:\n        \"log/{prefix}.filter.vcf.gz.log\",\n    params:\n        filter=\"-i 'QUAL > 5'\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/filter\"\n\n\nrule bcf_filter_o_bcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.filter.bcf\",\n    log:\n        \"log/{prefix}.filter.bcf.log\",\n    params:\n        filter=\"-i 'QUAL > 5'\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/filter\"\n\n\nrule bcf_filter_o_uncompressed_bcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.filter.uncompressed.bcf\",\n    log:\n        \"log/{prefix}.filter.uncompressed.bcf.log\",\n    params:\n        uncompressed_bcf=True,\n        filter=\"-i 'QUAL > 5'\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/filter\"\n"
    },
    {
      "name": "bcf_stats",
      "input": {
        "default": "{prefix}"
      },
      "output": {
        "default": "{prefix}.stats.txt"
      },
      "log": {
        "default": "{prefix}.bcftools.stats.log"
      },
      "params": {
        "default": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/stats"
      },
      "input_types": [
        "BCF, VCF, or VCF.gz input"
      ],
      "output_types": [
        "stats text file"
      ],
      "rule": "rule bcf_stats:\n    input:\n        \"{prefix}\",\n    output:\n        \"{prefix}.stats.txt\",\n    log:\n        \"{prefix}.bcftools.stats.log\",\n    params:\n        \"\",\n    wrapper:\n        \"master/bio/bcftools/stats\"\n"
    },
    {
      "name": "bcf_view_sample_file",
      "input": {
        "index": "{prefix}.bcf.csi",
        "samples": "samples.txt"
      },
      "output": {
        "default": "{prefix}.view_sample.vcf"
      },
      "log": {
        "default": "log/{prefix}.view_sample.vcf.log"
      },
      "params": {
        "extra": "lambda w, input: f'-S {input.samples}'"
      },
      "wrapper": {
        "default": "master/bio/bcftools/view"
      },
      "input_types": [
        "VCF/BCF file"
      ],
      "output_types": [
        "Filtered VCF/BCF file"
      ],
      "rule": "rule bcf_view_sample_file:\n    input:\n        \"{prefix}.bcf\",  # input bcf/vcf needs to be first input\n        index=\"{prefix}.bcf.csi\",  # other inputs are optional\n        samples=\"samples.txt\",\n    output:\n        \"{prefix}.view_sample.vcf\",\n    log:\n        \"log/{prefix}.view_sample.vcf.log\",\n    params:\n        # optional extra parameters\n        extra=lambda w, input: f\"-S {input.samples}\",\n    wrapper:\n        \"master/bio/bcftools/view\"\n\n\nrule bcf_view_o_vcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.view.vcf\",\n    log:\n        \"log/{prefix}.view.vcf.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/view\"\n\n\nrule bcf_view_o_vcf_gz:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.view.vcf.gz\",\n    log:\n        \"log/{prefix}.view.vcf.gz.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/view\"\n\n\nrule bcf_view_o_bcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.view.bcf\",\n    log:\n        \"log/{prefix}.view.bcf.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/view\"\n\n\nrule bcf_view_o_uncompressed_bcf:\n    input:\n        \"{prefix}.bcf\",\n    output:\n        \"{prefix}.view.uncompressed.bcf\",\n    log:\n        \"log/{prefix}.view.uncompressed.bcf.log\",\n    params:\n        uncompressed_bcf=True,\n        extra=\"\",\n    wrapper:\n        \"master/bio/bcftools/view\"\n"
    },
    {
      "name": "bcftools_call",
      "input": {
        "pileup": "{sample}.pileup.bcf"
      },
      "output": {
        "calls": "{sample}.calls.bcf"
      },
      "log": {
        "default": "logs/bcftools_call/{sample}.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "caller": "-m",
        "extra": "--ploidy 1 --prior 0.001"
      },
      "wrapper": {
        "default": "master/bio/bcftools/call"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bcftools_call:\n    input:\n        pileup=\"{sample}.pileup.bcf\",\n    output:\n        calls=\"{sample}.calls.bcf\",\n    params:\n        uncompressed_bcf=False,\n        caller=\"-m\",  # valid options include -c/--consensus-caller or -m/--multiallelic-caller\n        extra=\"--ploidy 1 --prior 0.001\",\n    log:\n        \"logs/bcftools_call/{sample}.log\",\n    wrapper:\n        \"master/bio/bcftools/call\"\n"
    },
    {
      "name": "bcftools_concat",
      "input": {
        "calls": [
          "a.bcf",
          "b.bcf"
        ]
      },
      "output": {
        "default": "all.bcf"
      },
      "log": {
        "default": "logs/all.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/concat"
      },
      "input_types": [
        "vcf files"
      ],
      "output_types": [
        "Concatenated VCF/BCF file"
      ],
      "rule": "rule bcftools_concat:\n    input:\n        calls=[\"a.bcf\", \"b.bcf\"],\n    output:\n        \"all.bcf\",\n    log:\n        \"logs/all.log\",\n    params:\n        uncompressed_bcf=False,\n        extra=\"\",  # optional parameters for bcftools concat (except -o)\n    threads: 4\n    resources:\n        mem_mb=10,\n    wrapper:\n        \"master/bio/bcftools/concat\"\n"
    },
    {
      "name": "bcftools_index",
      "input": {
        "default": "a.bcf"
      },
      "output": {
        "default": "a.bcf.csi"
      },
      "log": {
        "default": "index/a.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/index"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bcftools_index:\n    input:\n        \"a.bcf\",\n    output:\n        \"a.bcf.csi\",\n    log:\n        \"index/a.log\",\n    params:\n        extra=\"\",  # optional parameters for bcftools index\n    wrapper:\n        \"master/bio/bcftools/index\"\n"
    },
    {
      "name": "bcftools_merge",
      "input": {
        "calls": [
          "a.bcf",
          "b.bcf"
        ],
        "idx": [
          "a.bcf.csi",
          "b.bcf.csi"
        ]
      },
      "output": {
        "default": "all.bcf"
      },
      "log": {
        "default": "all.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/merge"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bcftools_merge:\n    input:\n        calls=[\"a.bcf\", \"b.bcf\"],\n        idx=[\"a.bcf.csi\", \"b.bcf.csi\"],\n    output:\n        \"all.bcf\",\n    log:\n        \"all.log\",\n    params:\n        uncompressed_bcf=False,\n        extra=\"\",  # optional parameters for bcftools concat (except -o)\n    wrapper:\n        \"master/bio/bcftools/merge\"\n"
    },
    {
      "name": "bcftools_mpileup",
      "input": {
        "alignments": [
          "mapped/{sample}.bam",
          "mapped/{sample}.bam"
        ],
        "ref": "genome.fasta",
        "index": "genome.fasta.fai"
      },
      "output": {
        "pileup": "pileups/{sample}.pileup.bcf"
      },
      "log": {
        "default": "logs/bcftools_mpileup/{sample}.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "extra": "--max-depth 100 --min-BQ 15"
      },
      "wrapper": {
        "default": "master/bio/bcftools/mpileup"
      },
      "input_types": [
        "SAM/BAM/CRAM file(s)"
      ],
      "output_types": [
        "pileup file"
      ],
      "rule": "rule bcftools_mpileup:\n    input:\n        alignments=[\"mapped/{sample}.bam\", \"mapped/{sample}.bam\"],\n        ref=\"genome.fasta\",  # this can be left out if --no-reference is in options\n        index=\"genome.fasta.fai\",\n    output:\n        pileup=\"pileups/{sample}.pileup.bcf\",\n    params:\n        uncompressed_bcf=False,\n        extra=\"--max-depth 100 --min-BQ 15\",\n    log:\n        \"logs/bcftools_mpileup/{sample}.log\",\n    wrapper:\n        \"master/bio/bcftools/mpileup\"\n"
    },
    {
      "name": "bcftools_reheader",
      "input": {
        "vcf": "a.bcf",
        "header": "header.txt",
        "samples": "samples.tsv"
      },
      "output": {
        "default": "a.reheader.bcf"
      },
      "log": {
        "default": "a.reheader.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "extra": "",
        "view_extra": ""
      },
      "wrapper": {
        "default": "master//bio/bcftools/reheader"
      },
      "input_types": [
        "VCF/BCF file",
        {
          "header": "new header (optional if \"samples\" is set)"
        },
        {
          "samples": "new sample names (optional if \"header\" is set)"
        }
      ],
      "output_types": [
        "VCF/BCF file with new header"
      ],
      "rule": "rule bcftools_reheader:\n    input:\n        vcf=\"a.bcf\",\n        ## new header, can be omitted if \"samples\" is set\n        header=\"header.txt\",\n        ## file containing new sample names, can be omitted if \"header\" is set\n        samples=\"samples.tsv\",\n    output:\n        \"a.reheader.bcf\",\n    log:\n        \"a.reheader.log\",\n    params:\n        uncompressed_bcf=False,\n        extra=\"\",  # optional parameters for bcftools reheader\n        view_extra=\"\",  # optional parameters for bcftools view\n    threads: 2\n    wrapper:\n        \"master//bio/bcftools/reheader\"\n\n\nuse rule bcftools_reheader as bcftools_reheader_map with:\n    input:\n        vcf=\"a.bcf\",\n        header=\"header.txt\",\n        samples=\"samples_map.tsv\",\n    output:\n        \"a.reheader_map.bcf\",\n    log:\n        \"a.reheader_map.log\",\n"
    },
    {
      "name": "bcftools_sort",
      "input": {
        "default": "{sample}.bcf"
      },
      "output": {
        "default": "{sample}.sorted.bcf"
      },
      "log": {
        "default": "logs/bcftools/sort/{sample}.log"
      },
      "params": {
        "uncompressed_bcf": false,
        "extras": ""
      },
      "wrapper": {
        "default": "master/bio/bcftools/sort"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bcftools_sort:\n    input:\n        \"{sample}.bcf\",\n    output:\n        \"{sample}.sorted.bcf\",\n    log:\n        \"logs/bcftools/sort/{sample}.log\",\n    params:\n        # Set to True, in case you want uncompressed BCF output\n        uncompressed_bcf=False,\n        # Extra arguments\n        extras=\"\",\n    resources:\n        mem_mb=8000,\n    wrapper:\n        \"master/bio/bcftools/sort\"\n"
    },
    {
      "name": "bwa_aln",
      "input": {
        "fastq": "reads/{sample}.{pair}.fastq",
        "idx": "multiext('genome', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "output": {
        "default": "sai/{sample}.{pair}.sai"
      },
      "log": {
        "default": "logs/bwa_aln/{sample}.{pair}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/bwa/aln"
      },
      "input_types": [
        "fastq\" FASTQ file(s)",
        {
          "idx": "BWA reference genome index"
        }
      ],
      "output_types": [
        "SAI file"
      ],
      "rule": "rule bwa_aln:\n    input:\n        fastq=\"reads/{sample}.{pair}.fastq\",\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"sai/{sample}.{pair}.sai\",\n    params:\n        extra=\"\",\n    log:\n        \"logs/bwa_aln/{sample}.{pair}.log\",\n    threads: 8\n    wrapper:\n        \"master/bio/bwa/aln\"\n"
    },
    {
      "name": "bwa_index",
      "input": {
        "default": "{genome}.fasta"
      },
      "output": {
        "idx": "multiext('{genome}.{alg}', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "log": {
        "default": "logs/bwa_index/{genome}.{alg}.log"
      },
      "params": {
        "extra": "lambda w: f'-a {w.alg}'"
      },
      "wrapper": {
        "default": "master/bio/bwa/index"
      },
      "input_types": [
        "fasta file"
      ],
      "output_types": [
        "BWA index files"
      ],
      "rule": "rule bwa_index:\n    input:\n        \"{genome}.fasta\",\n    output:\n        idx=multiext(\"{genome}.{alg}\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    log:\n        \"logs/bwa_index/{genome}.{alg}.log\",\n    params:\n        extra=lambda w: f\"-a {w.alg}\",\n    wrapper:\n        \"master/bio/bwa/index\"\n"
    },
    {
      "name": "bwa_mem",
      "input": {
        "reads": [
          "reads/{sample}.1.fastq",
          "reads/{sample}.2.fastq"
        ],
        "idx": "multiext('genome', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "output": {
        "default": "mapped/{sample}.bam"
      },
      "log": {
        "default": "logs/bwa_mem/{sample}.log"
      },
      "params": {
        "extra": "-R '@RG\\tID:{sample}\\tSM:{sample}'",
        "sorting": "none",
        "sort_order": "queryname",
        "sort_extra": ""
      },
      "wrapper": {
        "default": "master/bio/bwa/mem"
      },
      "input_types": [
        "FASTQ file(s)",
        "reference genome"
      ],
      "output_types": [
        "SAM/BAM/CRAM file"
      ],
      "rule": "rule bwa_mem:\n    input:\n        reads=[\"reads/{sample}.1.fastq\", \"reads/{sample}.2.fastq\"],\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.bam\",\n    log:\n        \"logs/bwa_mem/{sample}.log\",\n    params:\n        extra=r\"-R '@RG\\tID:{sample}\\tSM:{sample}'\",\n        sorting=\"none\",  # Can be 'none', 'samtools' or 'picard'.\n        sort_order=\"queryname\",  # Can be 'queryname' or 'coordinate'.\n        sort_extra=\"\",  # Extra args for samtools/picard.\n    threads: 8\n    wrapper:\n        \"master/bio/bwa/mem\"\n"
    },
    {
      "name": "bwa_sam_pe",
      "input": {
        "fastq": [
          "reads/{sample}.1.fastq",
          "reads/{sample}.2.fastq"
        ],
        "sai": [
          "sai/{sample}.1.sai",
          "sai/{sample}.2.sai"
        ],
        "idx": "multiext('genome', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "output": {
        "default": "mapped/{sample}.pe.sam"
      },
      "log": {
        "default": "logs/bwa_sam_pe/{sample}.log"
      },
      "params": {
        "extra": "-r '@RG\\tID:{sample}\\tSM:{sample}'",
        "sort": "none"
      },
      "wrapper": {
        "default": "master/bio/bwa/samxe"
      },
      "input_types": [
        {
          "fastq": "FASTQ file(s)"
        },
        {
          "sai": "SAI file(s)"
        },
        {
          "idx": "BWA reference genome index"
        }
      ],
      "output_types": [
        "SAM/BAM alignment file"
      ],
      "rule": "rule bwa_sam_pe:\n    input:\n        fastq=[\"reads/{sample}.1.fastq\", \"reads/{sample}.2.fastq\"],\n        sai=[\"sai/{sample}.1.sai\", \"sai/{sample}.2.sai\"],\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.pe.sam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",\n    log:\n        \"logs/bwa_sam_pe/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/samxe\"\n\n\nrule bwa_sam_se:\n    input:\n        fastq=\"reads/{sample}.1.fastq\",\n        sai=\"sai/{sample}.1.sai\",\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.se.sam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",\n    log:\n        \"logs/bwa_sam_se/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/samxe\"\n\n\nrule bwa_bam_pe:\n    input:\n        fastq=[\"reads/{sample}.1.fastq\", \"reads/{sample}.2.fastq\"],\n        sai=[\"sai/{sample}.1.sai\", \"sai/{sample}.2.sai\"],\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.pe.bam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",\n    log:\n        \"logs/bwa_bam_pe/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/samxe\"\n\n\nrule bwa_bam_se:\n    input:\n        fastq=\"reads/{sample}.1.fastq\",\n        sai=\"sai/{sample}.1.sai\",\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.se.bam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",\n    log:\n        \"logs/bwa_bam_se/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/samxe\"\n"
    },
    {
      "name": "bwa_sampe",
      "input": {
        "fastq": [
          "reads/{sample}.1.fastq",
          "reads/{sample}.2.fastq"
        ],
        "sai": [
          "sai/{sample}.1.sai",
          "sai/{sample}.2.sai"
        ],
        "idx": "multiext('genome', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "output": {
        "default": "mapped/{sample}.bam"
      },
      "log": {
        "default": "logs/bwa_sampe/{sample}.log"
      },
      "params": {
        "extra": "-r '@RG\\tID:{sample}\\tSM:{sample}'",
        "sort": "none",
        "sort_order": "queryname",
        "sort_extra": ""
      },
      "wrapper": {
        "default": "master/bio/bwa/sampe"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bwa_sampe:\n    input:\n        fastq=[\"reads/{sample}.1.fastq\", \"reads/{sample}.2.fastq\"],\n        sai=[\"sai/{sample}.1.sai\", \"sai/{sample}.2.sai\"],\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.bam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",  # optional: Enable sorting. Possible values: 'none', 'samtools' or 'picard'`\n        sort_order=\"queryname\",  # optional: Sort by 'queryname' or 'coordinate'\n        sort_extra=\"\",  # optional: extra arguments for samtools/picard\n    log:\n        \"logs/bwa_sampe/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/sampe\"\n"
    },
    {
      "name": "bwa_samse",
      "input": {
        "fastq": "reads/{sample}.1.fastq",
        "sai": "sai/{sample}.1.sai",
        "idx": "multiext('genome', '.amb', '.ann', '.bwt', '.pac', '.sa')"
      },
      "output": {
        "default": "mapped/{sample}.bam"
      },
      "log": {
        "default": "logs/bwa_samse/{sample}.log"
      },
      "params": {
        "extra": "-r '@RG\\tID:{sample}\\tSM:{sample}'",
        "sort": "none",
        "sort_order": "queryname",
        "sort_extra": ""
      },
      "wrapper": {
        "default": "master/bio/bwa/samse"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule bwa_samse:\n    input:\n        fastq=\"reads/{sample}.1.fastq\",\n        sai=\"sai/{sample}.1.sai\",\n        idx=multiext(\"genome\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\n    output:\n        \"mapped/{sample}.bam\",\n    params:\n        extra=r\"-r '@RG\\tID:{sample}\\tSM:{sample}'\",  # optional: Extra parameters for bwa.\n        sort=\"none\",  # optional: Enable sorting. Possible values: 'none', 'samtools' or 'picard'`\n        sort_order=\"queryname\",  # optional: Sort by 'queryname' or 'coordinate'\n        sort_extra=\"\",  # optional: extra arguments for samtools/picard\n    log:\n        \"logs/bwa_samse/{sample}.log\",\n    wrapper:\n        \"master/bio/bwa/samse\"\n"
    },
    {
      "name": "mpilup",
      "input": {
        "bam": "mapped/{sample}.bam",
        "reference_genome": "genome.fasta"
      },
      "output": {
        "default": "mpileup/{sample}.mpileup.gz"
      },
      "log": {
        "default": "logs/samtools/mpileup/{sample}.log"
      },
      "params": {
        "extra": "-d 10000"
      },
      "wrapper": {
        "default": "master/bio/samtools/mpileup"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule mpilup:\n    input:\n        # single or list of bam files\n        bam=\"mapped/{sample}.bam\",\n        reference_genome=\"genome.fasta\",\n    output:\n        \"mpileup/{sample}.mpileup.gz\",\n    log:\n        \"logs/samtools/mpileup/{sample}.log\",\n    params:\n        extra=\"-d 10000\",  # optional\n    wrapper:\n        \"master/bio/samtools/mpileup\"\n"
    },
    {
      "name": "norm_vcf",
      "input": {
        "default": "{prefix}.bcf"
      },
      "output": {
        "default": "{prefix}.norm.vcf"
      },
      "log": {
        "default": "{prefix}.norm.log"
      },
      "params": {
        "extra": "--rm-dup none"
      },
      "wrapper": {
        "default": "master/bio/bcftools/norm"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule norm_vcf:\n    input:\n        \"{prefix}.bcf\",\n        #ref=\"genome.fasta\"  # optional reference (will be translated into the -f option)\n    output:\n        \"{prefix}.norm.vcf\",  # can also be .bcf, corresponding --output-type parameter is inferred automatically\n    log:\n        \"{prefix}.norm.log\",\n    params:\n        extra=\"--rm-dup none\",  # optional\n        #uncompressed_bcf=False,\n    wrapper:\n        \"master/bio/bcftools/norm\"\n"
    },
    {
      "name": "samtools_calmd",
      "input": {
        "aln": "{sample}.bam",
        "ref": "genome.fasta"
      },
      "output": {
        "default": "{sample}.calmd.bam"
      },
      "log": {
        "default": "{sample}.calmd.log"
      },
      "params": {
        "extra": "-E"
      },
      "wrapper": {
        "default": "master/bio/samtools/calmd"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "SAM/BAM/CRAM file",
        "SAM/BAM/CRAM index file (optional)"
      ],
      "rule": "rule samtools_calmd:\n    input:\n        aln=\"{sample}.bam\",  # Can be 'sam', 'bam', or 'cram'\n        ref=\"genome.fasta\",\n    output:\n        \"{sample}.calmd.bam\",\n    log:\n        \"{sample}.calmd.log\",\n    params:\n        extra=\"-E\",  # optional params string\n    threads: 2\n    wrapper:\n        \"master/bio/samtools/calmd\"\n"
    },
    {
      "name": "samtools_collate",
      "input": {
        "default": "mapped/{sample}.bam"
      },
      "output": {
        "default": "{sample}.collated.bam"
      },
      "log": {
        "default": "logs/{sample}.log"
      },
      "params": {
        "extra": "-f"
      },
      "wrapper": {
        "default": "master/bio/samtools/collate"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "SAM/BAM/CRAM file"
      ],
      "rule": "rule samtools_collate:\n    input:\n        \"mapped/{sample}.bam\",\n    output:\n        \"{sample}.collated.bam\",\n    log:\n        \"logs/{sample}.log\",\n    params:\n        extra=\"-f\",\n    threads: 2\n    wrapper:\n        \"master/bio/samtools/collate\"\n"
    },
    {
      "name": "samtools_depth",
      "input": {
        "bams": [
          "mapped/A.bam",
          "mapped/B.bam"
        ],
        "bed": "regionToCalcDepth.bed"
      },
      "output": {
        "default": "depth.txt"
      },
      "log": {
        "default": "depth.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/depth"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule samtools_depth:\n    input:\n        bams=[\"mapped/A.bam\", \"mapped/B.bam\"],\n        bed=\"regionToCalcDepth.bed\",  # optional\n    output:\n        \"depth.txt\",\n    log:\n        \"depth.log\",\n    params:\n        # optional bed file passed to -b\n        extra=\"\",  # optional additional parameters as string\n    wrapper:\n        \"master/bio/samtools/depth\"\n"
    },
    {
      "name": "samtools_faidx",
      "input": {
        "default": "{sample}.fa"
      },
      "output": {
        "default": "out/{sample}.fa.fai"
      },
      "log": {
        "default": "{sample}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/faidx"
      },
      "input_types": [
        "reference sequence file (.fa)",
        {
          "regions": "file with regions"
        },
        {
          "fai": "index for reference file (optional)"
        },
        {
          "gzi": "index for BGZip'ed reference file (optional)"
        }
      ],
      "output_types": [
        "indexed reference sequence file (.fai)",
        {
          "fai": "index for reference file (optional)"
        },
        {
          "gzi": "index for BGZip'ed reference file (optional)"
        }
      ],
      "rule": "rule samtools_faidx:\n    input:\n        \"{sample}.fa\",\n    output:\n        \"out/{sample}.fa.fai\",\n    log:\n        \"{sample}.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n\n\nrule samtools_faidx_named:\n    input:\n        \"{sample}.fa\",\n    output:\n        fai=\"out/{sample}.named.fa.fai\",\n    log:\n        \"{sample}.named.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n\n\nrule samtools_faidx_bgzip:\n    input:\n        \"{sample}.fa.bgz\",\n    output:\n        fai=\"out/{sample}.fas.bgz.fai\",\n        gzi=\"out/{sample}.fas.bgz.gzi\",\n    log:\n        \"{sample}.bzgip.log\",\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n\n\nrule samtools_faidx_region_file:\n    input:\n        \"{sample}.fa\",\n        fai=\"idx/{sample}.fa.fai\",\n        regions=\"{sample}.regions\",\n    output:\n        \"out/{sample}.region_file.fas\",\n    log:\n        \"{sample}.region_file.log\",\n    params:\n        extra=\"--length 5\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n\n\nrule samtools_faidx_region_array:\n    input:\n        \"{sample}.fa\",\n        fai=\"idx/{sample}.fa.fai\",\n    output:\n        \"out/{sample}.region_array.fas\",\n    log:\n        \"{sample}.region_array.log\",\n    params:\n        region=[\"ref\", \"ref2\"],\n        extra=\"--length 5\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n\n\nrule samtools_faidx_bgzip_region:\n    input:\n        \"{sample}.fa.bgz\",\n        fai=\"idx/{sample}.fa.bgz.fai\",\n        gzi=\"idx/{sample}.fa.bgz.gzi\",\n    output:\n        \"out/{sample}.region_bgzip.fas\",\n    log:\n        \"{sample}.region_bgzip.log\",\n    params:\n        region=\"ref\",\n        extra=\"--length 5\",\n    wrapper:\n        \"master/bio/samtools/faidx\"\n"
    },
    {
      "name": "samtools_fastq",
      "input": {
        "default": "{prefix}.sam"
      },
      "output": {
        "default": "{prefix}.fasta"
      },
      "log": {
        "default": "{prefix}.log"
      },
      "params": {
        "outputtype": "fasta",
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/fastx/"
      },
      "input_types": [
        "bam or sam file (.bam, .sam)"
      ],
      "output_types": [
        "fastq file (.fastq) or fasta file (.fasta)"
      ],
      "rule": "rule samtools_fastq:\n    input:\n        \"{prefix}.sam\",\n    output:\n        \"{prefix}.fasta\",\n    log:\n        \"{prefix}.log\",\n    message:\n        \"\"\n    # Samtools takes additional threads through its option -@\n    threads: 2  # This value - 1 will be sent to -@\n    params:\n        outputtype=\"fasta\",\n        extra=\"\",\n    wrapper:\n        \"master/bio/samtools/fastx/\"\n"
    },
    {
      "name": "samtools_fastq_interleaved",
      "input": {
        "default": "mapped/{sample}.bam"
      },
      "output": {
        "default": "reads/{sample}.fq"
      },
      "log": {
        "default": "{sample}.interleaved.log"
      },
      "params": {
        "default": " "
      },
      "wrapper": {
        "default": "master/bio/samtools/fastq/interleaved"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule samtools_fastq_interleaved:\n    input:\n        \"mapped/{sample}.bam\",\n    output:\n        \"reads/{sample}.fq\",\n    log:\n        \"{sample}.interleaved.log\",\n    params:\n        \" \",\n    threads: 3\n    wrapper:\n        \"master/bio/samtools/fastq/interleaved\"\n"
    },
    {
      "name": "samtools_fastq_separate",
      "input": {
        "default": "mapped/{sample}.bam"
      },
      "output": {
        "default": "reads/{sample}.1.fq"
      },
      "log": {
        "default": "{sample}.separate.log"
      },
      "params": {
        "collate": "",
        "fastq": "-n"
      },
      "wrapper": {
        "default": "master/bio/samtools/fastq/separate"
      },
      "input_types": "undefined",
      "output_types": "undefined",
      "rule": "rule samtools_fastq_separate:\n    input:\n        \"mapped/{sample}.bam\",\n    output:\n        \"reads/{sample}.1.fq\",\n        \"reads/{sample}.2.fq\",\n    log:\n        \"{sample}.separate.log\",\n    params:\n        collate=\"\",\n        fastq=\"-n\",\n    # Remember, this is the number of samtools' additional threads. At least 2 threads have to be requested on cluster sumbission. This value - 2 will be sent to samtools sort -@ argument.\n    threads: 3\n    wrapper:\n        \"master/bio/samtools/fastq/separate\"\n"
    },
    {
      "name": "samtools_fixmate",
      "input": {
        "default": "mapped/{input}"
      },
      "output": {
        "default": "fixed/{input}"
      },
      "log": {
        "default": "{input}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/fixmate/"
      },
      "input_types": [
        "bam or sam file (.bam,.sam)"
      ],
      "output_types": [
        "bam or sam file (.bam,.sam)"
      ],
      "rule": "rule samtools_fixmate:\n    input:\n        \"mapped/{input}\",\n    output:\n        \"fixed/{input}\",\n    log:\n        \"{input}.log\",\n    message:\n        \"Fixing mate information in {wildcards.input}\"\n    threads: 1\n    params:\n        extra=\"\",\n    wrapper:\n        \"master/bio/samtools/fixmate/\"\n"
    },
    {
      "name": "samtools_flagstat",
      "input": {
        "default": "mapped/{sample}.bam"
      },
      "output": {
        "default": "mapped/{sample}.bam.flagstat"
      },
      "log": {
        "default": "{sample}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/flagstat"
      },
      "input_types": [
        "bam or sam file (.bam,.sam)"
      ],
      "output_types": [
        "flagstat file (.flagstat)"
      ],
      "rule": "rule samtools_flagstat:\n    input:\n        \"mapped/{sample}.bam\",\n    output:\n        \"mapped/{sample}.bam.flagstat\",\n    log:\n        \"{sample}.log\",\n    params:\n        extra=\"\",  # optional params string\n    wrapper:\n        \"master/bio/samtools/flagstat\"\n"
    },
    {
      "name": "samtools_idxstats",
      "input": {
        "bam": "mapped/{sample}.bam",
        "idx": "mapped/{sample}.bam.bai"
      },
      "output": {
        "default": "mapped/{sample}.bam.idxstats"
      },
      "log": {
        "default": "logs/samtools/idxstats/{sample}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/idxstats"
      },
      "input_types": [
        "indexed SAM, BAM or CRAM file (.SAM, .BAM, .CRAM)",
        "corresponding index files"
      ],
      "output_types": [
        "idxstat file (.idxstats)"
      ],
      "rule": "rule samtools_idxstats:\n    input:\n        bam=\"mapped/{sample}.bam\",\n        idx=\"mapped/{sample}.bam.bai\",\n    output:\n        \"mapped/{sample}.bam.idxstats\",\n    log:\n        \"logs/samtools/idxstats/{sample}.log\",\n    params:\n        extra=\"\",  # optional params string\n    wrapper:\n        \"master/bio/samtools/idxstats\"\n"
    },
    {
      "name": "samtools_index",
      "input": {
        "default": "mapped/{sample}.sorted.bam"
      },
      "output": {
        "default": "mapped/{sample}.sorted.bam.bai"
      },
      "log": {
        "default": "logs/samtools_index/{sample}.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/index"
      },
      "input_types": [
        "bam file"
      ],
      "output_types": [
        "bam file index (.bai)"
      ],
      "rule": "rule samtools_index:\n    input:\n        \"mapped/{sample}.sorted.bam\",\n    output:\n        \"mapped/{sample}.sorted.bam.bai\",\n    log:\n        \"logs/samtools_index/{sample}.log\",\n    params:\n        extra=\"\",  # optional params string\n    threads: 4  # This value - 1 will be sent to -@\n    wrapper:\n        \"master/bio/samtools/index\"\n"
    },
    {
      "name": "samtools_markdup",
      "input": {
        "aln": "{sample}.bam"
      },
      "output": {
        "bam": "{sample}.markdup.bam",
        "idx": "{sample}.markdup.bam.csi"
      },
      "log": {
        "default": "{sample}.markdup.log"
      },
      "params": {
        "extra": "-c --no-PG"
      },
      "wrapper": {
        "default": "master/bio/samtools/markdup"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "SAM/BAM/CRAM file",
        "SAM/BAM/CRAM index file (optional)"
      ],
      "rule": "rule samtools_markdup:\n    input:\n        aln=\"{sample}.bam\",\n    output:\n        bam=\"{sample}.markdup.bam\",\n        idx=\"{sample}.markdup.bam.csi\",\n    log:\n        \"{sample}.markdup.log\",\n    params:\n        extra=\"-c --no-PG\",\n    threads: 2\n    wrapper:\n        \"master/bio/samtools/markdup\"\n"
    },
    {
      "name": "samtools_merge",
      "input": {
        "default": [
          "mapped/A.bam",
          "mapped/B.bam"
        ]
      },
      "output": {
        "default": "merged.bam"
      },
      "log": {
        "default": "merged.log"
      },
      "params": {
        "extra": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/merge"
      },
      "input_types": [
        "list of bam files to merge"
      ],
      "output_types": [
        "merged bam file"
      ],
      "rule": "rule samtools_merge:\n    input:\n        [\"mapped/A.bam\", \"mapped/B.bam\"],\n    output:\n        \"merged.bam\",\n    log:\n        \"merged.log\",\n    params:\n        extra=\"\",  # optional additional parameters as string\n    threads: 8\n    wrapper:\n        \"master/bio/samtools/merge\"\n"
    },
    {
      "name": "samtools_sort",
      "input": {
        "default": "mapped/{sample}.bam"
      },
      "output": {
        "default": "mapped/{sample}.sorted.bam"
      },
      "log": {
        "default": "logs/{sample}.log"
      },
      "params": {
        "extra": "-m 4G"
      },
      "wrapper": {
        "default": "master/bio/samtools/sort"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "SAM/BAM/CRAM file",
        "SAM/BAM/CRAM index file (optional)"
      ],
      "rule": "rule samtools_sort:\n    input:\n        \"mapped/{sample}.bam\",\n    output:\n        \"mapped/{sample}.sorted.bam\",\n    log:\n        \"logs/{sample}.log\",\n    params:\n        extra=\"-m 4G\",\n    threads: 8\n    wrapper:\n        \"master/bio/samtools/sort\"\n"
    },
    {
      "name": "samtools_stats",
      "input": {
        "bam": "mapped/{sample}.bam",
        "bed": "design.bed"
      },
      "output": {
        "default": "samtools_stats/{sample}.txt"
      },
      "log": {
        "default": "logs/samtools_stats/{sample}.log"
      },
      "params": {
        "extra": "",
        "region": "xx:1000000-2000000"
      },
      "wrapper": {
        "default": "master/bio/samtools/stats"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "statistics file"
      ],
      "rule": "rule samtools_stats:\n    input:\n        bam=\"mapped/{sample}.bam\",\n        bed=\"design.bed\",  #Optional input, specify target regions\n    output:\n        \"samtools_stats/{sample}.txt\",\n    params:\n        extra=\"\",  # Optional: extra arguments.\n        region=\"xx:1000000-2000000\",  # Optional: region string.\n    log:\n        \"logs/samtools_stats/{sample}.log\",\n    wrapper:\n        \"master/bio/samtools/stats\"\n"
    },
    {
      "name": "samtools_view",
      "input": {
        "default": "{sample}.sam"
      },
      "output": {
        "bam": "{sample}.bam",
        "idx": "{sample}.bai"
      },
      "log": {
        "default": "{sample}.log"
      },
      "params": {
        "extra": "",
        "region": ""
      },
      "wrapper": {
        "default": "master/bio/samtools/view"
      },
      "input_types": [
        "SAM/BAM/CRAM file"
      ],
      "output_types": [
        "SAM/BAM/CRAM file",
        "SAM/BAM/CRAM index file (optional)"
      ],
      "rule": "rule samtools_view:\n    input:\n        \"{sample}.sam\",\n    output:\n        bam=\"{sample}.bam\",\n        idx=\"{sample}.bai\",\n    log:\n        \"{sample}.log\",\n    params:\n        extra=\"\",  # optional params string\n        region=\"\",  # optional region string\n    threads: 2\n    wrapper:\n        \"master/bio/samtools/view\"\n"
    }
  ]
}